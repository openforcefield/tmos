"""Reference dictionaries of interest.

References include:
 - bond_type_dict: (dict) Given a bond order float, a RDKit bond type class instance is returned
 - bond_order_dict: (dict) Given a RDKit bond type string, a bond order float is returned
 - expected_oxidation_states: (dict) Dictionary that provides a list of expected oxidation states given a elemental symbol.
 - ideal_angles: (dict): Given the number of atoms around a center get a dictionary of possible geometries and the angles associated
 with that geometry in ascending order.
 - METALS_NUM: (list) A list of atomic numbers for transition metal complexes
 - transition_metal_covalent_radii: (dict) Given the element symbol, the covalent radii of transition metals is returned

"""

import numpy as np

from rdkit import Chem

METALS_NUM = [
    12,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    57,
    28,
    29,
    30,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
]

bond_type_dict = {
    0: Chem.BondType.DATIVE,
    1: Chem.BondType.SINGLE,
    2: Chem.BondType.DOUBLE,
    1.5: Chem.BondType.AROMATIC,
    3: Chem.BondType.TRIPLE,
}
bond_order_dict = {
    "SINGLE": 1,
    "DOUBLE": 2,
    "AROMATIC": 1.5,
    "DATIVE": 0,  # this is 1 in rdkit, but it should be zero to determine multiplicity
    "TRIPLE": 3,
}
transition_metal_covalent_radii = {
    # Transition metals (first row)
    "Sc": 1.70,
    "Ti": 1.60,
    "V": 1.53,
    "Cr": 1.39,
    "Mn": 1.39,
    "Fe": 1.32,
    "Co": 1.26,
    "Ni": 1.24,
    "Cu": 1.32,
    "Zn": 1.22,
    # Transition metals (second row)
    "Y": 1.90,
    "Zr": 1.75,
    "Nb": 1.64,
    "Mo": 1.54,
    "Tc": 1.47,
    "Ru": 1.46,
    "Rh": 1.42,
    "Pd": 1.39,
    "Ag": 1.45,
    "Cd": 1.44,
    # Transition metals (third row)
    "Hf": 1.75,
    "Ta": 1.70,
    "W": 1.62,
    "Re": 1.51,
    "Os": 1.44,
    "Ir": 1.41,
    "Pt": 1.36,
    "Au": 1.36,
    "Hg": 1.32,
}

expected_oxidation_states = {
    "Li": [1],
    "Mg": [2],
    # Transition metals (first row)
    "Sc": [3],
    "Ti": [2, 3, 4],
    "V": [2, 3, 4, 5],
    "Cr": [0, 1, 2, 3, 4, 5, 6],
    "Mn": [2, 3, 4, 5, 6],
    "Fe": [2, 3, 4],
    "Co": [0, 1, 2, 3],
    "Ni": [0, 1, 2, 3],
    "Cu": [1, 2, 3],
    "Zn": [2],
    # Transition metals (second row)
    "Y": [3],
    "Zr": [2, 3, 4],
    "Nb": [2, 3, 4, 5],
    "Mo": [0, 1, 2, 3, 4, 5, 6],
    "Tc": [2, 3, 4, 5, 6],
    "Ru": [2, 3, 4],
    "Rh": [0, 1, 2, 3],
    "Pd": [0, 1, 2, 3],
    "Ag": [1, 2, 3],
    "Cd": [2],
    # Transition metals (third row)
    "Hf": [2, 3, 4],
    "Ta": [2, 3, 4, 5],
    "W": [0, 1, 2, 3, 4, 5, 6],
    "Re": [2, 3, 4, 5, 6],
    "Os": [2, 3, 4],
    "Ir": [0, 1, 2, 3],
    "Pt": [0, 1, 2, 3],
    "Au": [1, 2, 3],
    "Hg": [2],
}


group_numbers = {
    "Li": 1,
    "Mg": 2,
    # Transition metals (first row)
    "Sc": 3,
    "Ti": 4,
    "V": 5,
    "Cr": 6,
    "Mn": 7,
    "Fe": 8,
    "Co": 9,
    "Ni": 10,
    "Cu": 11,
    "Zn": 12,
    # Transition metals (second row)
    "Y": 3,
    "Zr": 4,
    "Nb": 5,
    "Mo": 6,
    "Tc": 7,
    "Ru": 8,
    "Rh": 9,
    "Pd": 10,
    "Ag": 11,
    "Cd": 12,
    # Transition metals (third row)
    "Hf": 4,
    "Ta": 5,
    "W": 6,
    "Re": 7,
    "Os": 8,
    "Ir": 9,
    "Pt": 10,
    "Au": 11,
    "Hg": 12,
}


ideal_angles = {
    2: {  # 1 angles
        "Bent_109": np.array([109.0]),
        "Bent_120": np.array([126.0]),
        "Linear": np.array([180.0]),
    },
    3: {  # 3 angles
        "Trigonal Planar": np.array([120, 120, 120]),
        "Trigonal Planar 2": np.array([109, 126, 126]),  # From Architector
        "Trigonal Pyramidal": np.array([107, 107, 107]),
        "Trigonal Pyramidal 2": np.array([109, 109, 109]),  # From Architector
        "T-Shaped": np.array([90, 90, 180]),
    },
    4: {  # 6 angles
        "Square Planar": np.array([90, 90, 90, 90, 180, 180]),
        "Tetrahedral 2": np.array([109.5, 109.5, 109.5, 109.5, 109.5, 109.5]),
        "Tetrahedral": np.array(
            [109.0, 109.0, 109.0, 109.0, 109.0, 109.0]
        ),  # From Architector
        "Disphenoidal": np.array([90, 90, 90, 90, 120, 180]),  # Seesaw
        "Disphenoidal 2": np.array(
            [90, 90, 90, 90, 90, 180]
        ),  # Seesaw # From Architector
    },
    5: {  # 10 angles
        "Square Pyramidal": np.array([90, 90, 90, 90, 90, 90, 90, 90, 180, 180]),
        "Trigonal Bipyramidal": np.array([90, 90, 90, 90, 90, 90, 120, 120, 120, 180]),
        "Trigonal Bipyramidal 2": np.array(
            [90, 90, 90, 90, 90, 90, 109, 126, 126, 180]
        ),  # From Architector
        "Pentagonal Planar": np.array([72, 72, 72, 72, 72, 144, 144, 144, 144, 144]),
    },
    6: {  # 15 angles
        "Hexagonal_Planar": np.array(
            [59, 59, 61, 61, 61, 61, 119, 119, 119, 119, 121, 121, 180, 180, 180]
        ),  # From Architector
        "Octahedral": np.array(
            [90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 180, 180, 180]
        ),
        "Trigonal Prismatic": np.array(
            [60, 60, 60, 60, 60, 60, 90, 90, 90, 120, 120, 120, 150, 150, 150]
        ),
        "Trigonal Prismatic 2": np.array(
            [82, 82, 82, 82, 82, 82, 82, 82, 82, 136, 136, 136, 136, 136, 136]
        ),  # From Architector
        # "Pentagonal Pyramidal": np.array([
        #     72, 72, 72, 72, 72, 90, 90, 90, 90, 90, 144, 144, 144, 144, 144
        # ]),
    },
    7: {  # 21 angles
        "Pentagonal Bipyamidal": np.array(
            [
                72,
                72,
                72,
                72,
                72,
                90,
                90,
                90,
                90,
                90,
                90,
                90,
                90,
                90,
                90,
                144,
                144,
                144,
                144,
                144,
                180,
            ]
        ),
        "Capped Trigonal Prismatic": np.array(
            [
                60,
                60,
                60,
                60,
                60,
                60,
                90,
                90,
                90,
                90,
                90,
                90,
                120,
                120,
                120,
                120,
                120,
                120,
                120,
                120,
                120,
            ]
        ),
        "Capped Trigonal Prismatic 2": np.array(  # From Architector
            [
                68,
                68,
                68,
                68,
                82,
                82,
                82,
                82,
                82,
                82,
                82,
                82,
                82,
                136,
                136,
                136,
                136,
                136,
                136,
                139,
                139,
            ]
        ),
        "Capped Octahedral": np.array(  # From Architector
            [
                55,
                55,
                55,
                90,
                90,
                90,
                90,
                90,
                90,
                90,
                90,
                90,
                90,
                90,
                90,
                125,
                125,
                125,
                180,
                180,
                180,
            ]
        ),
        "Hexagonal Pyramidal'": np.array(  # From Architector
            [
                59,
                59,
                61,
                61,
                61,
                61,
                82,
                84,
                86,
                94,
                96,
                98,
                119,
                119,
                119,
                119,
                121,
                121,
                180,
                180,
                180,
            ]
        ),
    },
    8: {  # 28 angles
        "Axial Bicapped Trigonal Prismatic": np.array(
            [  # From Architector
                60,
                60,
                60,
                60,
                60,
                60,
                61,
                61,
                62,
                94,
                95,
                99,
                99,
                100,
                100,
                114,
                118,
                118,
                119,
                119,
                119,
                121,
                121,
                122,
                136,
                141,
                141,
                178,
            ]
        ),
        "Square Prismatic": np.array(
            [
                71,
                71,
                71,
                71,
                71,
                71,
                71,
                71,
                71,
                71,
                71,
                71,
                109,
                109,
                109,
                109,
                109,
                109,
                109,
                109,
                109,
                109,
                109,
                109,
                180,
                180,
                180,
                180,
            ]
        ),
        "Bicapped Trigonal Prismatic": np.array(
            [
                64,
                64,
                68,
                68,
                68,
                68,
                72,
                72,
                82,
                82,
                82,
                82,
                82,
                82,
                82,
                82,
                82,
                126,
                136,
                136,
                136,
                136,
                136,
                136,
                139,
                139,
                139,
                139,
            ]
        ),
        "Square Antiprismatic": np.array(
            [  # From Architector
                70,
                70,
                70,
                70,
                71,
                71,
                71,
                71,
                82,
                82,
                82,
                82,
                82,
                82,
                82,
                82,
                109,
                109,
                109,
                109,
                144,
                144,
                144,
                144,
                144,
                144,
                144,
                144,
            ]
        ),
        "Dodecahedral": np.array(
            [
                65,
                65,
                75,
                75,
                75,
                75,
                75,
                75,
                75,
                75,
                75,
                75,
                75,
                75,
                95,
                95,
                95,
                95,
                135,
                135,
                135,
                135,
                140,
                140,
                140,
                140,
                145,
                145,
            ]
        ),
        "Hexagonal Bipyramidal": np.array(
            [
                59,
                59,
                61,
                61,
                61,
                61,
                82,
                82,
                84,
                84,
                86,
                86,
                94,
                94,
                96,
                96,
                98,
                98,
                119,
                119,
                119,
                119,
                121,
                121,
                180,
                180,
                180,
                180,
            ]
        ),
    },
    9: {  # 36 angles
        "Tri Trimer Capped": np.array(
            [  # From Architector
                61,
                61,
                61,
                62,
                62,
                62,
                73,
                75,
                76,
                77,
                77,
                77,
                78,
                78,
                78,
                79,
                79,
                79,
                88,
                90,
                90,
                117,
                120,
                122,
                123,
                123,
                124,
                133,
                135,
                135,
                136,
                137,
                137,
                152,
                152,
                154,
            ]
        ),
        "Tricapped Trigonal Prismatic": np.array(
            [  # From Architector
                64,
                64,
                64,
                64,
                68,
                68,
                68,
                68,
                72,
                72,
                72,
                72,
                82,
                82,
                82,
                82,
                82,
                82,
                82,
                82,
                82,
                109,
                126,
                126,
                136,
                136,
                136,
                136,
                136,
                136,
                139,
                139,
                139,
                139,
                139,
                139,
            ]
        ),
        "Capped Square Antiprismatic": np.array(
            [  # From Architector
                55,
                55,
                55,
                55,
                70,
                70,
                70,
                70,
                71,
                71,
                71,
                71,
                82,
                82,
                82,
                82,
                82,
                82,
                82,
                82,
                109,
                109,
                109,
                109,
                125,
                125,
                125,
                125,
                144,
                144,
                144,
                144,
                144,
                144,
                144,
                144,
            ]
        ),
    },
    10: {  # 45 angles
        "Axial Bicapped Hexagonal Planar": np.array(
            [  # From Architector
                53,
                53,
                53,
                53,
                53,
                67,
                67,
                70,
                70,
                73,
                73,
                73,
                73,
                75,
                75,
                75,
                75,
                76,
                77,
                77,
                81,
                81,
                92,
                92,
                108,
                108,
                109,
                109,
                116,
                116,
                120,
                120,
                124,
                124,
                125,
                125,
                126,
                126,
                139,
                142,
                142,
                149,
                156,
                156,
                177,
            ]
        ),
    },
    12: {  # 66 angles
        "Penta Bicapped Pyramidal": np.array(
            [  # From Architector
                47,
                47,
                48,
                48,
                49,
                64,
                64,
                65,
                65,
                66,
                66,
                66,
                66,
                67,
                67,
                67,
                67,
                67,
                67,
                67,
                67,
                68,
                68,
                68,
                68,
                68,
                68,
                72,
                72,
                72,
                97,
                100,
                100,
                100,
                100,
                108,
                108,
                112,
                112,
                112,
                112,
                113,
                113,
                113,
                113,
                121,
                121,
                123,
                123,
                125,
                125,
                125,
                125,
                125,
                125,
                127,
                129,
                129,
                130,
                130,
                164,
                164,
                165,
                165,
                166,
                180,
            ]
        ),
    },
}
